{"name":"Tapkee","tagline":"An efficient dimension reduction library","body":"Tapkee: an efficient dimension reduction library\r\n================================================\r\n\r\nTapkee is a C++ template library for dimensionality reduction with some bias on \r\nspectral methods. The Tapkee origins from the code developed during \r\n[GSoC 2011](http://www.google-melange.com/gsoc/homepage/google/gsoc2011) as \r\nthe part of the [Shogun machine learning toolbox](https://github.com/shogun-toolbox/shogun). \r\nThe project aim is to provide efficient and flexible standalone library for \r\ndimensionality reduction which can be easily integrated to existing codebases.\r\nTapkee leverages capabilities of effective [Eigen3 linear algebra library](http://eigen.tuxfamily.org) and \r\noptionally makes use of the [ARPACK eigensolver](http://www.caam.rice.edu/software/ARPACK/). To achieve \r\ngreat flexibility we provide a callback interface which decouples dimension reduction algorithms from\r\nthe data representation and storage schemes (see Callback interface section).\r\n\r\nContributions are very encouraged as we distribute our software under permissive \r\n[BSD 3-clause license](LICENSE) (except some parts that are distributed under other \r\nopen sources licenses, see Licensing section of this document).\r\n\r\nTo achieve code quality we employ [googletest](https://code.google.com/p/googletest/) as a testing\r\nframework (tests can be found [here](test/gtest)), [valgrind](http://valgrind.org/) for dynamic \r\nanalysis and [clang static analyzer](http://clang-analyzer.llvm.org/) as a tool for static code \r\nanalysis. We are happy to use [Travis](https://travis-ci.org) as a continuous integration \r\nplatform. The build status is:\r\n\r\n[![Build Status](https://travis-ci.org/lisitsyn/tapkee.png)](https://travis-ci.org/lisitsyn/tapkee)\r\n\r\nCallback interface\r\n------------------\r\n\r\nTo achieve greater flexibility, the library decouples algorithms from data representation.\r\nTo let user choose how to handle his data we provide callback interface essentially based\r\non three functions: kernel function (similarity), distance function (dissimilarity) and \r\ndense feature vector access function. It is worth to notice that most of methods use either\r\nkernel or distance while all linear (projective) methods require access to feature vector. \r\nFull set of callbacks (all three callbacks) makes possible to use all implemented methods.\r\n\r\nCallback interface enables user to reach great flexibility: ability to set up some caching strategy,\r\nlazy initialization of resources and various more. As an example we provide \r\n[simple callback set](https://github.com/lisitsyn/tapkee/tree/master/tapkee/callback/eigen_callbacks.hpp)\r\nfor dense feature matrices out-of-the-box. If you are able to precompute kernel and distance matrices you may find\r\n[precomputed callbacks](https://github.com/lisitsyn/tapkee/tree/master/tapkee/callback/precomputed_callbacks.hpp) \r\nuseful.\r\n\r\nIt is required to identify your callback functors using the following macroses:\r\n\r\n`TAPKEE_CALLBACK_IS_KERNEL(your_kernel_callback)`\r\n\r\n`TAPKEE_CALLBACK_IS_DISTANCE(your_distance_callback)`\r\n\r\nOut-of-the-box callbacks are already 'identified' - no need to use any macroses for them.\r\n\r\nIntegration with other libraries\r\n--------------------------------\r\n\r\nThe main entry point of Tapkee is [embed](https://github.com/lisitsyn/tapkee/tree/master/tapkee/tapkee.hpp) \r\nmethod (see the documentation for more details).\r\n\r\nIf your library includes Eigen3 (and only if) at some point - \r\nlet the Tapkee know about that with the following define:\r\n\r\n`#define TAPKEE_EIGEN_INCLUDE_FILE <path/to/your/eigen/include/file.h>`\r\n\r\nPlease note that if you don't include Eigen3 in your project there is no need to define that variable -\r\nEigen3 will be included by Tapkee in this case.\r\n\r\nIf you are able to use less restrictive licenses (such as GPLv3 and LGPLv3) you could define \r\nthe following variables:\r\n\r\n- `TAPKEE_USE_LGPL_COVERTREE` to use Covertree code by John Langford.\r\n- `TAPKEE_USE_GPL_TSNE` to use Barnes-Hut-SNE code by Laurens van der Maaten (not yet possible).\r\n\r\nWhen compiling your software that includes Tapkee be sure Eigen3 headers are in include path and your code\r\nis linked against ARPACK library (-larpack key for g++ and clang++).\r\n\r\nFor an example of integration you may check \r\n[Tapkee adapter in Shogun](https://github.com/shogun-toolbox/shogun/blob/master/src/shogun/lib/tapkee/tapkee_shogun.cpp). \r\n\r\nTo control the flow you may also provide callbacks that track progress\r\nand indicate if computations were cancelled (`tapkee::PROGRESS_FUNCTION` and `tapkee::CANCEL_FUNCTION` keys).\r\n\r\nWe welcome any integration so please contact authors if you have got any questions. If you have \r\nsuccessfully used the library please also let authors know about that - mentions of any\r\napplications are very appreciated.\r\n\r\nCustomization\r\n-------------\r\n\r\nTapkee is supposed to be highly customizable with preprocessor definitions.\r\n\r\nIf you want to use float as numeric type (default is double) you may do \r\nthat with definition of `#define TAPKEE_CUSTOM_NUMTYPE float` \r\nbefore including [defines header](https://github.com/lisitsyn/tapkee/tree/master/tapkee/tapkee_defines.hpp).\r\n\r\nIf you use some non-standard STL-compatible realization of vector, map and pair you may redefine them\r\nwith `TAPKEE_INTERNAL_VECTOR`, `TAPKEE_INTERNAL_PAIR`, `TAPKEE_INTERNAL_MAP` \r\n(they are set to std::vector, std::pair and std::map by default).\r\n\r\nOther properties can be loaded from some provided header file using `#define TAPKEE_CUSTOM_PROPERTIES`. Currently\r\nsuch file should define the variable `COVERTREE_BASE` which is base of the CoverTree to be used (default is 1.3).\r\n\r\nApplication\r\n-----------\r\n\r\nTapkee comes with a sample application which can be used to construct\r\nlow-dimensional representations of feature matrices. For more information on its usage please run:\r\n\r\n`./tapkee -h`\r\n\r\nThe application takes plain ASCII file containing dense matrix (each vector is a column and each\r\nline contains values of some feature). The output of the application is stored into the provided\r\nfile in the same format (each line is feature).\r\n\r\nTo compile the application please use [CMake](http://cmake.org/). The workflow of compilation \r\nTapkee with CMake is usual. When using Unix-based\r\nsystems you may use the following command to compile the Tapkee application:\r\n\r\n`mkdir build && cd build && cmake [definitions] .. && make`\r\n\r\nThere are a few cases when you'd want to put some definitions:\r\n\r\n- To enable unit-tests compilation add to `-DBUILD_TESTS=1` to `[definitions]` when building. Please note that \r\n  building unit-tests require googletest. If you are running Ubuntu you may install `libgtest-dev` package for that. \r\n  Otherwise, if you have gtest sources around you may provide them as `-DGTEST_SOURCE_DIR` and `-DGTEST_INCLUDES_DIR`.\r\n  If may also download gtest with the following command: \r\n  `wget http://googletest.googlecode.com/files/gtest-1.6.0.zip && unzip -q gtest-1.6.0.zip && cd gtest-1.6.0 && cmake . && make && cd .. && rm gtest-1.6.0.zip`.\r\n  Downloaded sources will be used by Tapkee on build.\r\n  To run tests use `make test` command (or better 'ctest -VV').\r\n\r\n- To enable precomputation of kernel/distance matrices which can speed-up algorithms (but requires much more memory) add\r\n  `-DPRECOMPUTED=1` to `[definitions]` when building.\r\n\r\n- To build application without parts licensed by GPLv3 and LGPLv3 use `-DGPL_FREE=1` definition.\r\n\r\nThe compilation requires Eigen3 to be available in your path. The ARPACK library is also highly recommended. \r\nOn Ubuntu Linux these packages can be installed with \r\n\r\n`sudo apt-get install libeigen3-dev libarpack2-dev`\r\n\r\nIf you are using Mac OS X and Macports you can install these packages with \r\n\r\n`sudo port install eigen3 && sudo port install arpack`\r\n\r\nIn case you want to use some non-default \r\ncompiler use `CC=your-C-compiler CXX=your-C++-compiler cmake` when running cmake.\r\n\r\nNeed help?\r\n----------\r\n\r\nIf you need any help or advice don't hesitate to send [an email](mailto://lisitsyn.s.o@gmail.com \"Send mail\r\nto Sergey Lisitsyn\") or fire [an issue at github](https://github.com/lisitsyn/tapkee/issues/new \"New Tapkee Issue\").\r\n\r\nSupported platforms\r\n-------------------\r\n\r\nTapkee is tested to be fully functional on Linux (ICC, GCC, Clang compilers) \r\nand Mac OS X (GCC and Clang compilers). It also compiles under Windows (MSVS 2012 compiler)\r\nbut wasn't properly tested yet. In general, Tapkee uses no platform specific code \r\nand should work on other systems as well. Please [let us know](mailto://lisitsyn.s.o@gmail.com) \r\nif you have successfully compiled or have got issues on any other system not listed above.\r\n\r\nSupported dimension reduction methods\r\n-------------------------------------\r\n\r\nTapkee provides implementations of the following dimension reduction methods (urls to descriptions provided):\r\n\r\n* [Locally Linear Embedding and Kernel Locally Linear Embedding (LLE/KLLE)](http://lisitsyn.github.com/tapkee/methods/lle.html)\r\n* [Neighborhood Preserving Embedding (NPE)](http://lisitsyn.github.com/tapkee/methods/npe.html)\r\n* [Local Tangent Space Alignment (LTSA)](http://lisitsyn.github.com/tapkee/methods/ltsa.html)\r\n* [Linear Local Tangent Space Alignment (LLTSA)](http://lisitsyn.github.com/tapkee/methods/lltsa.html)\r\n* [Hessian Locally Linear Embedding (HLLE)](http://lisitsyn.github.com/tapkee/methods/hlle.html)\r\n* [Laplacian eigenmaps](http://lisitsyn.github.com/tapkee/methods/laplacian_eigenmaps.html)\r\n* [Locality Preserving Projections](http://lisitsyn.github.com/tapkee/methods/lpp.html)\r\n* [Diffusion map](http://lisitsyn.github.com/tapkee/methods/diffusion_map.html)\r\n* [Isomap and landmark Isomap](http://lisitsyn.github.com/tapkee/methods/isomap.html)\r\n* [Multidimensional scaling and landmark Multidimensional scaling (MDS/lMDS)](http://lisitsyn.github.com/tapkee/methods/mds.html)\r\n* [Stochastic Proximity Embedding (SPE)](http://lisitsyn.github.com/tapkee/methods/spe.html)\r\n* [PCA and randomized PCA](http://lisitsyn.github.com/tapkee/methods/pca.html)\r\n* [Kernel PCA (kPCA)](http://lisitsyn.github.com/tapkee/methods/kpca.html)\r\n* [Random projection](http://lisitsyn.github.com/tapkee/methods/ra.html)\r\n* [Factor analysis](http://lisitsyn.github.com/tapkee/methods/fa.html)\r\n* [t-SNE](http://lisitsyn.github.com/tapkee/method/tsne.html) (not yet included)\r\n* [Barnes-Hut-SNE](htpp://lisitsyn.github.com/tapkee/method/barnes_hut_sne.html) (not yet included)\r\n\r\nLicensing\r\n---------\r\n\r\nThe library is distributed under the [BSD 3-clause](LICENSE) license.\r\n\r\nExceptions are:\r\n\r\n- [Barnes-Hut-SNE code](tapkee/external/barnes_hut_sne/) by Laurens van der Maaten which\r\n  is distributed under the [GPLv3 license](GPL-LICENSE), not yet included.\r\n\r\n- [Covertree code](tapkee/neighbors/covertree.hpp) by John Langford and Dinoj Surendran \r\n  which is distributed under the [LGPLv3 license](LGPL-LICENSE).\r\n\r\n- [Any type](tapkee/utils/any.hpp) by Christopher Diggins which is distributed under \r\n  the [Boost v.1.0 license](http://www.boost.org/LICENSE_1_0.txt).\r\n\r\n- [EZOptionsParser](src/ezoptionparser.hpp) by Remik Ziemlinski which is distributed \r\n  under the [MIT license](MIT-LICENSE).\r\n","google":"UA-37814556-1","note":"Don't delete this file! It's used internally to help with page regeneration."}