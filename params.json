{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","body":"Tapkee: an efficient dimension reduction toolbox\r\n================================================\r\n\r\nTapkee is a C++ template library for dimensionality reduction with some bias on \r\nspectral methods. The Tapkee origins from the code developed during GSoC 2011 as \r\nthe part of the [Shogun machine learning toolbox](https://github.com/shogun-toolbox/shogun). \r\nThe project aim is to provide standalone efficient and flexible library for \r\ndimensionality reduction. We always encourage contributions and distribute our software\r\nunder free GPLv3 license.\r\n\r\nTapkee uses highly effective Eigen3 template linear algebra library and \r\noptionally makes use of the ARPACK eigensolver.\r\n\r\nInterface\r\n---------\r\n\r\nThis toolbox considers dimensionality reduction algorithms separate from data representation.\r\nTo let user choose how to handle his data we provide callback interface essentially based\r\non three functions: kernel function (similarity), distance function (dissimilarity) and \r\ndense feature vector access function. It is worth to notice that most of methods use either\r\nkernel or distance while all linear (projective) methods require access to feature vector.\r\n\r\nCallback interface enables user to reach great flexibility: ability to set up some caching strategy,\r\nlazy initialization of resources and various more. As an example we provide simple callback set\r\nfor dense feature matrices.\r\n\r\nIntegration with other libraries\r\n--------------------------------\r\n\r\nThe Tapkee library is designed to be easily integrated to other codebases. \r\nFor examples of such integration see [Shogun machine learning toolbox](https://github.com/shogun-toolbox/shogun).\r\n\r\nApplication\r\n-----------\r\n\r\nTapkee comes with a sample application used to embed dense representations, for more information run\r\n\r\n`./tapkee_app -h`\r\n\r\n\r\nNeed help?\r\n----------\r\n\r\nIf you need any help or advice don't hesitate to send [an email](mailto://lisitsyn.s.o@gmail.com \"Send mail\r\nto Sergey Lisitsyn\") or fire [an issue at github](https://github.com/lisitsyn/tapkee/issues/new \"New Tapkee Issue\").\r\n\r\nSupported platforms\r\n-------------------\r\n\r\nTapkee is tested to be fully functional on Linux (ICC, GCC, Clang compilers) \r\nand Mac OS X (GCC and Clang compilers).\r\n\r\nSupported dimension reduction methods\r\n-------------------------------------\r\n\r\nTapkee provides implementations of the following dimension reduction methods:\r\n\r\n* Locally Linear Embedding / Kernel Locally Linear Embedding (LLE/KLLE)\r\n* Neighborhood Preserving Embedding (NPE)\r\n* Local Tangent Space Alignment / Kernel Local Tangent Space Alignment (LTSA/KLTSA)\r\n* Linear Local Tangent Space Alignment (LLTSA)\r\n* Hessian Locally Linear Embedding (HLLE)\r\n* Diffusion map\r\n* Laplacian eigenmaps\r\n* Locality Preserving Projections (LPP)\r\n* Multidimensional scaling and landmark Multidimensional scaling (MDS/lMDS)\r\n* Isomap and landmark Isomap \r\n* Stochastic Proximity Embedding (SPE)\r\n* Kernel PCA (kPCA)\r\n\r\nThe following methods are under development:\r\n\r\n* Coordinated Factor Analysis (CFA)\r\n* Neighborhood Component Analysis (NCA)\r\n* Maximum Variance Unfolding and landmark Maximum Variance Unfolding (MVU)\r\n* t-Distributed Stochastic Neighbor Embedding (t-SNE)\r\n","tagline":"An efficient dimension reduction toolbox","name":"Tapkee"}